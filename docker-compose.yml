services:
  # Servicio de base de datos MySQL
  mysql:
    image: mysql:8.0
    container_name: trade-simulator-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: Bolsa
      MYSQL_USER: usuario
      MYSQL_PASSWORD: password
    volumes:
      # Volumen bind mount para persistir datos de MySQL
      - ./sources/servidorNode/database:/docker-entrypoint-initdb.d
      # Volumen para datos de MySQL
      - mysql_data:/var/lib/mysql
    networks:
      trade-network:
        ipv4_address: 172.28.1.4
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Servicio de backend Node.js
  node:
    build:
      context: ./sources/servidorNode
      dockerfile: Dockerfile
    container_name: trade-simulator-node
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      # Volumen bind mount para código fuente de Node.js
      - ./sources/servidorNode:/app
      # Excluir node_modules del host
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=mysql
      - DB_USER=usuario
      - DB_PASS=password
      - DB_NAME=Bolsa
      - DB_PORT=3306
    networks:
      trade-network:
        ipv4_address: 172.28.1.3
      frontend_network:
        ipv4_address: 172.29.1.3
    ports:
      - "3000:3000"

  # Servicio de frontend Angular
  angular:
    build:
      context: ./sources/frontendAngular
      dockerfile: Dockerfile
    container_name: trade-simulator-angular
    restart: unless-stopped
    depends_on:
      - node
    volumes:
      # Volumen bind mount para código fuente de Angular
      - ./sources/frontendAngular:/app
      # Excluir node_modules del host
      - /app/node_modules
    networks:
      frontend_network:
        ipv4_address: 172.29.1.2
    ports:
      - "4200:4200"

# Definición de volúmenes
volumes:
  mysql_data:
    driver: local

# Definición de redes
networks:
  trade-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
  frontend_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.29.0.0/16
          gateway: 172.29.0.1